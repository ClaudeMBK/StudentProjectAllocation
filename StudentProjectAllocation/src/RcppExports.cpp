// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// hungarian_algorithm_cpp
IntegerVector hungarian_algorithm_cpp(NumericMatrix cost);
RcppExport SEXP _StudentProjectAllocation_hungarian_algorithm_cpp(SEXP costSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type cost(costSEXP);
    rcpp_result_gen = Rcpp::wrap(hungarian_algorithm_cpp(cost));
    return rcpp_result_gen;
END_RCPP
}
// genetic_algorithm_cpp
IntegerVector genetic_algorithm_cpp(NumericMatrix cost, int population_size, int generations, double mutation_rate);
RcppExport SEXP _StudentProjectAllocation_genetic_algorithm_cpp(SEXP costSEXP, SEXP population_sizeSEXP, SEXP generationsSEXP, SEXP mutation_rateSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type cost(costSEXP);
    Rcpp::traits::input_parameter< int >::type population_size(population_sizeSEXP);
    Rcpp::traits::input_parameter< int >::type generations(generationsSEXP);
    Rcpp::traits::input_parameter< double >::type mutation_rate(mutation_rateSEXP);
    rcpp_result_gen = Rcpp::wrap(genetic_algorithm_cpp(cost, population_size, generations, mutation_rate));
    return rcpp_result_gen;
END_RCPP
}
// insertion_sort_Rcpp
std::vector<double> insertion_sort_Rcpp(std::vector<double> v);
RcppExport SEXP _StudentProjectAllocation_insertion_sort_Rcpp(SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<double> >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(insertion_sort_Rcpp(v));
    return rcpp_result_gen;
END_RCPP
}
// heap_sort_Rcpp
std::vector<double> heap_sort_Rcpp(std::vector<double> v);
RcppExport SEXP _StudentProjectAllocation_heap_sort_Rcpp(SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<double> >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(heap_sort_Rcpp(v));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_StudentProjectAllocation_hungarian_algorithm_cpp", (DL_FUNC) &_StudentProjectAllocation_hungarian_algorithm_cpp, 1},
    {"_StudentProjectAllocation_genetic_algorithm_cpp", (DL_FUNC) &_StudentProjectAllocation_genetic_algorithm_cpp, 4},
    {"_StudentProjectAllocation_insertion_sort_Rcpp", (DL_FUNC) &_StudentProjectAllocation_insertion_sort_Rcpp, 1},
    {"_StudentProjectAllocation_heap_sort_Rcpp", (DL_FUNC) &_StudentProjectAllocation_heap_sort_Rcpp, 1},
    {NULL, NULL, 0}
};

RcppExport void R_init_StudentProjectAllocation(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
