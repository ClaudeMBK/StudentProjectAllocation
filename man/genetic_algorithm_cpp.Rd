% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/RcppExports.R
\name{genetic_algorithm_cpp}
\alias{genetic_algorithm_cpp}
\title{Genetic Algorithm for Assignment Problem}
\usage{
genetic_algorithm_cpp(
  costMatrix,
  popSize = 100L,
  generations = 500L,
  mutationRate = 0.1
)
}
\arguments{
\item{costMatrix}{A square numeric matrix \code{n x n}, representing the cost
of assigning item \code{i} to position \code{j}.}

\item{popSize}{An integer specifying the number of individuals (assignments) in each generation. Default is 100.}

\item{generations}{An integer giving the number of generations to run the genetic algorithm. Default is 500.}

\item{mutationRate}{A numeric value (between 0 and 1) giving the probability of mutation. Default is 0.1.}
}
\value{
A \code{list} with the following elements:
\itemize{
\item \code{cost}: The total cost (fitness) of the best assignment found.
\item \code{assignment}: An integer vector representing the assignment.
Each position i in the vector corresponds to student i,
and the value at that position indicates the assigned project.
}
}
\description{
This function implements a genetic algorithm to solve an assignment problem
using a cost matrix. It returns the optimal assignment found (minimizing the
total cost) and its corresponding cost.

The algorithm works by generating an initial population of random permutations,
selecting the best individuals each generation, and producing new ones via
crossover and mutation.
}
\examples{
set.seed(123)
cost_matrix <- matrix(sample(1:100, 36, replace = TRUE), nrow = 6)
result <- genetic_algorithm_cpp(cost_matrix)
result$cost
result$assignment

}
